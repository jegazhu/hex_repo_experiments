Title: Integrating Snowflake with SQL Server Management Studio (SSMS) for Data Transfer

In this project, we embarked on a journey to seamlessly integrate Snowflake, a powerful cloud-based data platform, 
with SQL Server Management Studio (SSMS), a robust database management tool. Our objective was to establish a connection 
between SSMS and Snowflake, enabling the seamless transfer of data between the two platforms.

With the groundwork laid, we seamlessly transferred data from Snowflake to SSMS databases using SQL queries to insert the 
extracted data into the newly created tables. Through meticulous testing and validation processes, we verified the accuracy 
and completeness of the data transferred, ensuring data integrity throughout the process.

By successfully establishing connections between SSMS and Snowflake and implementing efficient data transfer mechanisms, 
we empowered organizations to harness the full potential of their data assets. Whether it's performing advanced analytics, 
generating insightful reports, or driving data-driven decision-making, this integration opens up a world of possibilities for 
organizations striving to unlock actionable insights from their data.

--simple query to Snowflake table from MSSQL 
--SNOWPARK_FOR_PYTHON__HANDSONLAB__WEATHER_DATA


--[SNOWFLAKE_TEST].[FREE_COMPANY_DATASET].[PUBLIC].[FREECOMPANYDATASET]
-- azfqoyo-efa16662.snowflakecomputing.com

---CHECK CONNECTIONS FROM ODBC LOCAL TO SNOWFLAKE

select * from openquery([AMZ_VENDOR], 'select * from [PRODUCT_CATALOG] ')
select * from openquery([SNOWFLAKE_TEST], 'select * from history_day ')
select * from openquery([SNOWFLAKE_TEST2], 'select * from [FREE_COMPANY_DATASET].[PUBLIC].[FREECOMPANYDATASET]')
select * from openquery([SNOWFLAKE_TEST], 'select * from forecast_day ')

---PULLING DATA FROM SNOWFLAKE TO SSMS
SELECT * FROM OPENQUERY([SNOWFLAKE_TEST2], 
'SELECT 
	TOP 1000
	TRY_CAST(COUNTRY AS VARCHAR(255)) AS COUNTRY, 
	FOUNDED,  
	TRY_CAST(ID AS VARCHAR(255)) AS ID, 
	TRY_CAST(INDUSTRY AS VARCHAR(255)) AS INDUSTRY,
	TRY_CAST(LINKEDIN_URL AS VARCHAR(255)) AS LINKEDIN_URL,
	TRY_CAST(LOCALITY AS VARCHAR(255)) AS LOCALITY,
	TRY_CAST(NAME AS VARCHAR(255)) AS NAME, 
	TRY_CAST(REGION AS VARCHAR(255)) AS REGION,
	TRY_CAST(SIZE AS VARCHAR(255)) AS SIZE,
	TRY_CAST(WEBSITE AS VARCHAR(255)) AS WEBSITE
FROM FREECOMPANYDATASET')
-----TESTING OUT IF CONNECTIONS IS CORRECT WITH A DUMMY QUERY
SELECT * FROM OPENQUERY([GOG_KW_S], 'SELECT 1 ')
SELECT * FROM OPENQUERY([AMZ_VENDOR], 'SELECT 1 ')

SELECT TOP 5 
   TRY_CAST(COUNTRY AS VARCHAR(MAX)) AS COUNTRY 
FROM OPENQUERY([GOG_KW_S], 'SELECT COUNTRY FROM [GOOGLE_KEYWORDS]');
------------------------------------------------------------------------------------
SELECT * FROM OPENQUERY([GOG_KW_S], 
'SELECT 
	TOP 1000
	CAST(COUNTRY  AS VARCHAR(255)) AS COUNTRY,
	CAST(KEYWORD AS VARCHAR(255)) AS KEYWORD,  
	CAST(SITE AS VARCHAR(255)) AS SITE, 
	CAST(YEAR AS VARCHAR(255)) AS YEAR,
	CAST(MONTH AS VARCHAR(255)) AS MONTH,
	CAST(DAY AS VARCHAR(255)) AS DAY,
	CAST(PLATFORM AS VARCHAR(255)) AS PLATFORM, 
	CAST(REFERRAL_TYPE AS VARCHAR(255)) AS REFERRAL_TYPE,
	CAST(CALIBRATED_USERS  AS VARCHAR(255)) AS CALIBRATED_USERS,
	CAST(CALIBRATED_CLICKS AS VARCHAR(255)) AS CALIBRATED_CLICKS,
	CAST(IS_BRANDED_KEYWORD AS VARCHAR(255)) AS IS_BRANDED_KEYWORD,
	CAST(IS_QUESTION AS VARCHAR(255)) AS IS_QUESTION,
	CAST(DATE AS VARCHAR(255)) AS DATE
FROM GOOGLE_KEYWORDS')


---PULLING DATA FROM SNOWFLAKE TO SSMS
SELECT * FROM OPENQUERY([AMZ_VENDOR], 
'SELECT TOP 5000
   CAST(ID AS VARCHAR(255)) as ID,
   CAST(DATE AS VARCHAR(255)) AS DATE,
CAST(DISTRIBUTOR_VIEW AS VARCHAR(255)) AS DISTRIBUTOR_VIEW,
CAST(ASIN AS VARCHAR(255)) AS ASIN,
CAST(PARENT_ASIN AS VARCHAR(255)) AS PARENT_ASIN,
CAST(PRODUCT_TITLE AS VARCHAR(255)) AS PRODUCT_TITLE,
ROUND(CAST(LIST_PRICE AS DECIMAL(10,2)), 2) AS LIST_PRICE,
CAST(BINDING AS VARCHAR(255)) AS BINDING,
CAST(AUTHOR_OR_ARTIST AS VARCHAR(255)) AS AUTHOR_OR_ARTIST,
CAST(PRODUCT_GROUP AS VARCHAR(255)) AS PRODUCT_GROUP,
CAST(COLOR AS VARCHAR(255)) AS COLOR,
CAST(COLOR_COUNT AS FLOAT) AS COLOR_COUNT,
CAST(BRAND_CODE AS VARCHAR(255)) AS BRAND_CODE,
CAST(BRAND AS VARCHAR(255)) AS BRAND,
CAST(MANUFACTURING_CODE AS VARCHAR(255)) AS MANUFACTURING_CODE,
CAST(PARENT_MANUFACTURING_CODE AS VARCHAR(255)) AS PARENT_MANUFACTURING_CODE
FROM AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.PRODUCT_CATALOG')

---CREATING TABLE IN SSMS END BASED ON SNOWFLAKE SETTINGS
CREATE TABLE PRODUCT_CATALOG (
    ID VARCHAR(255),
    DATE VARCHAR(255),
    DISTRIBUTOR_VIEW VARCHAR(255),
    ASIN VARCHAR(255),
    PARENT_ASIN VARCHAR(255),
    PRODUCT_TITLE VARCHAR(255),
    LIST_PRICE DECIMAL(10,2),
    BINDING VARCHAR(255),
    AUTHOR_OR_ARTIST VARCHAR(255),
    PRODUCT_GROUP VARCHAR(255),
    COLOR VARCHAR(255),
    COLOR_COUNT FLOAT,
    BRAND_CODE VARCHAR(255),
    BRAND VARCHAR(255),
    MANUFACTURING_CODE VARCHAR(255),
    PARENT_MANUFACTURING_CODE VARCHAR(255)
);

--INSERTING DATA FROM Linked Server [[AMZ_VENDOR]]
use [Project-DB]
--SELECT * 
INSERT INTO [dbo].[PRODUCT_CATALOG]
SELECT * FROM OPENQUERY([AMZ_VENDOR], 
'SELECT TOP 10000
   CAST(ID AS VARCHAR(255)) as ID,
   CAST(DATE AS VARCHAR(255)) AS DATE,
CAST(DISTRIBUTOR_VIEW AS VARCHAR(255)) AS DISTRIBUTOR_VIEW,
CAST(ASIN AS VARCHAR(255)) AS ASIN,
CAST(PARENT_ASIN AS VARCHAR(255)) AS PARENT_ASIN,
CAST(PRODUCT_TITLE AS VARCHAR(255)) AS PRODUCT_TITLE,
ROUND(CAST(LIST_PRICE AS DECIMAL(10,2)), 2) AS LIST_PRICE,
CAST(BINDING AS VARCHAR(255)) AS BINDING,
CAST(AUTHOR_OR_ARTIST AS VARCHAR(255)) AS AUTHOR_OR_ARTIST,
CAST(PRODUCT_GROUP AS VARCHAR(255)) AS PRODUCT_GROUP,
CAST(COLOR AS VARCHAR(255)) AS COLOR,
CAST(COLOR_COUNT AS FLOAT) AS COLOR_COUNT,
CAST(BRAND_CODE AS VARCHAR(255)) AS BRAND_CODE,
CAST(BRAND AS VARCHAR(255)) AS BRAND,
CAST(MANUFACTURING_CODE AS VARCHAR(255)) AS MANUFACTURING_CODE,
CAST(PARENT_MANUFACTURING_CODE AS VARCHAR(255)) AS PARENT_MANUFACTURING_CODE
FROM AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.PRODUCT_CATALOG')

delete from [Project-DB].dbo.PRODUCT_CATALOG
select * from [Project-DB].dbo.PRODUCT_CATALOG order by ID DESC
select COUNT(*) from PRODUCT_CATALOG
SELECT CAST(ID AS VARCHAR(255)) as ID FROM PRODUCT_CATALOG

---ALTERNATIVE TO INSERT IN BATCHES

DECLARE @BatchSize INT = 1000
DECLARE @StartRow INT = 1
DECLARE @EndRow INT = @BatchSize
DECLARE @SQL NVARCHAR(MAX)

WHILE (@StartRow <= 1000)
BEGIN
    SET @SQL = N'INSERT INTO [dbo].[PRODUCT_CATALOG]
    SELECT * FROM OPENQUERY([AMZ_VENDOR], 
    ''SELECT 
        CAST(ID AS VARCHAR(255)) as ID,
        CAST(DATE AS VARCHAR(255)) AS DATE,
        CAST(DISTRIBUTOR_VIEW AS VARCHAR(255)) AS DISTRIBUTOR_VIEW,
        CAST(ASIN AS VARCHAR(255)) AS ASIN,
        CAST(PARENT_ASIN AS VARCHAR(255)) AS PARENT_ASIN,
        CAST(PRODUCT_TITLE AS VARCHAR(255)) AS PRODUCT_TITLE,
        ROUND(CAST(LIST_PRICE AS DECIMAL(10,2)), 2) AS LIST_PRICE,
        CAST(BINDING AS VARCHAR(255)) AS BINDING,
        CAST(AUTHOR_OR_ARTIST AS VARCHAR(255)) AS AUTHOR_OR_ARTIST,
        CAST(PRODUCT_GROUP AS VARCHAR(255)) AS PRODUCT_GROUP,
        CAST(COLOR AS VARCHAR(255)) AS COLOR,
        CAST(COLOR_COUNT AS FLOAT) AS COLOR_COUNT,
        CAST(BRAND_CODE AS VARCHAR(255)) AS BRAND_CODE,
        CAST(BRAND AS VARCHAR(255)) AS BRAND,
        CAST(MANUFACTURING_CODE AS VARCHAR(255)) AS MANUFACTURING_CODE,
        CAST(PARENT_MANUFACTURING_CODE AS VARCHAR(255)) AS PARENT_MANUFACTURING_CODE
    FROM 
        (SELECT *, ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS RowNum 
        FROM AMAZON_VENDOR_ANALYTICS__SAMPLE_DATASET.PUBLIC.PRODUCT_CATALOG) AS SubQuery
    WHERE SubQuery.RowNum BETWEEN ' + CAST(@StartRow AS VARCHAR(10)) + ' AND ' + CAST(@EndRow AS VARCHAR(10)) + ''')'

    EXEC sp_executesql @SQL

    SET @StartRow = @StartRow + @BatchSize
    SET @EndRow = @EndRow + @BatchSize
END

-----------------------------------------------------------------------------------
SELECT * INTO dbo.FCT_snowflake
FROM OPENQUERY(
[SNOWFLAKE_TEST2],
'SELECT 
	TOP 1000
	TRY_CAST(COUNTRY AS VARCHAR(255)) AS COUNTRY, 
	FOUNDED,  
	TRY_CAST(ID AS VARCHAR(255)) AS ID, 
	TRY_CAST(INDUSTRY AS VARCHAR(255)) AS INDUSTRY,
	TRY_CAST(LINKEDIN_URL AS VARCHAR(255)) AS LINKEDIN_URL,
	TRY_CAST(LOCALITY AS VARCHAR(255)) AS LOCALITY,
	TRY_CAST(NAME AS VARCHAR(255)) AS NAME, 
	TRY_CAST(REGION AS VARCHAR(255)) AS REGION,
	TRY_CAST(SIZE AS VARCHAR(255)) AS SIZE,
	TRY_CAST(WEBSITE AS VARCHAR(255)) AS WEBSITE
FROM FREECOMPANYDATASET') 

-----------------------------------------------------------------------------------
CREATE TABLE dbo.GOOGLE_KEYWORDS_snowflake (
    COUNTRY VARCHAR(255),
    KEYWORD VARCHAR(255),
    SITE VARCHAR(255),
    YEAR VARCHAR(255),
    MONTH VARCHAR(255),
    DAY VARCHAR(255),
    PLATFORM VARCHAR(255),
    REFERRAL_TYPE VARCHAR(255),
    CALIBRATED_USERS VARCHAR(255),
    CALIBRATED_CLICKS VARCHAR(255),
    IS_BRANDED_KEYWORD VARCHAR(255),
    IS_QUESTION VARCHAR(255),
    DATE VARCHAR(255)
);

--SELECT *
INSERT INTO dbo.GOOGLE_KEYWORDS_snowflake
SELECT * FROM OPENQUERY(
[GOG_KW_S], 
'SELECT 
	TOP 1000
	CAST(COUNTRY  AS VARCHAR(255)) AS COUNTRY,
	CAST(KEYWORD AS VARCHAR(255)) AS KEYWORD,  
	CAST(SITE AS VARCHAR(255)) AS SITE, 
	CAST(YEAR AS VARCHAR(255)) AS YEAR,
	CAST(MONTH AS VARCHAR(255)) AS MONTH,
	CAST(DAY AS VARCHAR(255)) AS DAY,
	CAST(PLATFORM AS VARCHAR(255)) AS PLATFORM, 
	CAST(REFERRAL_TYPE AS VARCHAR(255)) AS REFERRAL_TYPE,
	CAST(CALIBRATED_USERS  AS VARCHAR(255)) AS CALIBRATED_USERS,
	CAST(CALIBRATED_CLICKS AS VARCHAR(255)) AS CALIBRATED_CLICKS,
	CAST(IS_BRANDED_KEYWORD AS VARCHAR(255)) AS IS_BRANDED_KEYWORD,
	CAST(IS_QUESTION AS VARCHAR(255)) AS IS_QUESTION,
	CAST(DATE AS VARCHAR(255)) AS DATE
FROM GOOGLE_KEYWORDS')
-----------------------------------------------------------------------------------
--CTE
WITH forecast AS (
    SELECT *
    FROM OPENQUERY([SNOWFLAKE_TEST], 'SELECT * FROM history_day')
)

SELECT 
	DATE_VALID_STD as Date, 
	DOY_STD as Date_Year, 
	TOT_RADIATION_SOLAR_TOTAL_WPM2 as Total_Radiation, 
	DATENAME(DW,DATE_VALID_STD) as DayName, 
	DATEPART(WEEK,DATE_VALID_STD) as #Week, 
	FORMAT(DATE_VALID_STD, 'MMMM') AS MonthName, 
	MONTH(DATE_VALID_STD) as #Month,
	YEAR(DATE_VALID_STD) AS Year
FROM SF_forecast_h
--WHERE DATE_VALID_STD BETWEEN '2024-01-01' AND '2024-01-31'
ORDER BY 
	Year ASC, DATE_VALID_STD ASC


WITH Variances AS (
    SELECT 
        TOT_RADIATION_SOLAR_TOTAL_WPM2,
        YEAR(DATE_VALID_STD) AS Year,
        FORMAT(DATE_VALID_STD, 'MMMM') AS MonthName,
        LAG(TOT_RADIATION_SOLAR_TOTAL_WPM2) OVER (ORDER BY YEAR(DATE_VALID_STD), MONTH(DATE_VALID_STD)) AS PrevMonth_TOT_RS,
        LAG(TOT_RADIATION_SOLAR_TOTAL_WPM2, 12) OVER (ORDER BY YEAR(DATE_VALID_STD), MONTH(DATE_VALID_STD)) AS PrevYear_TOT_RS,
		MONTH(DATE_VALID_STD) as #Month
    FROM SF_forecast_h
)
SELECT 
    *,
    TOT_RADIATION_SOLAR_TOTAL_WPM2 - COALESCE(PrevMonth_TOT_RS, 0) AS Month_Variance,
    TOT_RADIATION_SOLAR_TOTAL_WPM2 - COALESCE(PrevYear_TOT_RS, 0) AS Year_Variance
FROM Variances;


--USE Project-DB;

INSERT INTO SF_forecast_h (
    POSTAL_CODE,
    COUNTRY,
    DATE_VALID_STD,
    DOY_STD,
    MIN_TEMPERATURE_AIR_2M_C,
    AVG_TEMPERATURE_AIR_2M_C,
    MAX_TEMPERATURE_AIR_2M_C,
    MIN_TEMPERATURE_WETBULB_2M_C,
    AVG_TEMPERATURE_WETBULB_2M_C,
    MAX_TEMPERATURE_WETBULB_2M_C,
    MIN_TEMPERATURE_DEWPOINT_2M_C,
    AVG_TEMPERATURE_DEWPOINT_2M_C,
    MAX_TEMPERATURE_DEWPOINT_2M_C,
    MIN_TEMPERATURE_FEELSLIKE_2M_C,
    AVG_TEMPERATURE_FEELSLIKE_2M_C,
    MAX_TEMPERATURE_FEELSLIKE_2M_C,
    MIN_TEMPERATURE_WINDCHILL_2M_C,
    AVG_TEMPERATURE_WINDCHILL_2M_C,
    MAX_TEMPERATURE_WINDCHILL_2M_C,
    MIN_TEMPERATURE_HEATINDEX_2M_C,
    AVG_TEMPERATURE_HEATINDEX_2M_C,
    MAX_TEMPERATURE_HEATINDEX_2M_C,
    MIN_HUMIDITY_RELATIVE_2M_PCT,
    AVG_HUMIDITY_RELATIVE_2M_PCT,
    MAX_HUMIDITY_RELATIVE_2M_PCT,
    MIN_HUMIDITY_SPECIFIC_2M_GPKG,
    AVG_HUMIDITY_SPECIFIC_2M_GPKG,
    MAX_HUMIDITY_SPECIFIC_2M_GPKG,
    MIN_PRESSURE_2M_MB,
    AVG_PRESSURE_2M_MB,
    MAX_PRESSURE_2M_MB,
    MIN_PRESSURE_TENDENCY_2M_MB,
    AVG_PRESSURE_TENDENCY_2M_MB,
    MAX_PRESSURE_TENDENCY_2M_MB,
    MIN_PRESSURE_MEAN_SEA_LEVEL_MB,
    AVG_PRESSURE_MEAN_SEA_LEVEL_MB,
    MAX_PRESSURE_MEAN_SEA_LEVEL_MB,
    MIN_WIND_SPEED_10M_MPS,
    AVG_WIND_SPEED_10M_MPS,
    MAX_WIND_SPEED_10M_MPS,
    AVG_WIND_DIRECTION_10M_DEG,
    MIN_WIND_SPEED_80M_MPS,
    AVG_WIND_SPEED_80M_MPS,
    MAX_WIND_SPEED_80M_MPS,
    AVG_WIND_DIRECTION_80M_DEG,
    MIN_WIND_SPEED_100M_MPS,
    AVG_WIND_SPEED_100M_MPS,
    MAX_WIND_SPEED_100M_MPS,
    AVG_WIND_DIRECTION_100M_DEG,
    TOT_PRECIPITATION_MM,
    TOT_SNOWFALL_CM,
    TOT_SNOWDEPTH_CM,
    MIN_CLOUD_COVER_TOT_PCT,
    AVG_CLOUD_COVER_TOT_PCT,
    MAX_CLOUD_COVER_TOT_PCT,
    MIN_RADIATION_SOLAR_TOTAL_WPM2,
    AVG_RADIATION_SOLAR_TOTAL_WPM2,
    MAX_RADIATION_SOLAR_TOTAL_WPM2,
    TOT_RADIATION_SOLAR_TOTAL_WPM2
)
SELECT
    POSTAL_CODE,
    COUNTRY,
    DATE_VALID_STD,
    DOY_STD,
    MIN_TEMPERATURE_AIR_2M_C,
    AVG_TEMPERATURE_AIR_2M_C,
    MAX_TEMPERATURE_AIR_2M_C,
    MIN_TEMPERATURE_WETBULB_2M_C,
    AVG_TEMPERATURE_WETBULB_2M_C,
    MAX_TEMPERATURE_WETBULB_2M_C,
    MIN_TEMPERATURE_DEWPOINT_2M_C,
    AVG_TEMPERATURE_DEWPOINT_2M_C,
    MAX_TEMPERATURE_DEWPOINT_2M_C,
    MIN_TEMPERATURE_FEELSLIKE_2M_C,
    AVG_TEMPERATURE_FEELSLIKE_2M_C,
    MAX_TEMPERATURE_FEELSLIKE_2M_C,
    MIN_TEMPERATURE_WINDCHILL_2M_C,
    AVG_TEMPERATURE_WINDCHILL_2M_C,
    MAX_TEMPERATURE_WINDCHILL_2M_C,
    MIN_TEMPERATURE_HEATINDEX_2M_C,
    AVG_TEMPERATURE_HEATINDEX_2M_C,
    MAX_TEMPERATURE_HEATINDEX_2M_C,
    MIN_HUMIDITY_RELATIVE_2M_PCT,
    AVG_HUMIDITY_RELATIVE_2M_PCT,
    MAX_HUMIDITY_RELATIVE_2M_PCT,
    MIN_HUMIDITY_SPECIFIC_2M_GPKG,
    AVG_HUMIDITY_SPECIFIC_2M_GPKG,
    MAX_HUMIDITY_SPECIFIC_2M_GPKG,
    MIN_PRESSURE_2M_MB,
    AVG_PRESSURE_2M_MB,
    MAX_PRESSURE_2M_MB,
    MIN_PRESSURE_TENDENCY_2M_MB,
    AVG_PRESSURE_TENDENCY_2M_MB,
    MAX_PRESSURE_TENDENCY_2M_MB,
    MIN_PRESSURE_MEAN_SEA_LEVEL_MB,
    AVG_PRESSURE_MEAN_SEA_LEVEL_MB,
    MAX_PRESSURE_MEAN_SEA_LEVEL_MB,
    MIN_WIND_SPEED_10M_MPS,
    AVG_WIND_SPEED_10M_MPS,
    MAX_WIND_SPEED_10M_MPS,
    AVG_WIND_DIRECTION_10M_DEG,
    MIN_WIND_SPEED_80M_MPS,
    AVG_WIND_SPEED_80M_MPS,
    MAX_WIND_SPEED_80M_MPS,
    AVG_WIND_DIRECTION_80M_DEG,
    MIN_WIND_SPEED_100M_MPS,
    AVG_WIND_SPEED_100M_MPS,
    MAX_WIND_SPEED_100M_MPS,
    AVG_WIND_DIRECTION_100M_DEG,
    TOT_PRECIPITATION_MM,
    TOT_SNOWFALL_CM,
    TOT_SNOWDEPTH_CM,
    MIN_CLOUD_COVER_TOT_PCT,
    AVG_CLOUD_COVER_TOT_PCT,
    MAX_CLOUD_COVER_TOT_PCT,
    MIN_RADIATION_SOLAR_TOTAL_WPM2,
    AVG_RADIATION_SOLAR_TOTAL_WPM2,
    MAX_RADIATION_SOLAR_TOTAL_WPM2,
    TOT_RADIATION_SOLAR_TOTAL_WPM2
FROM OPENQUERY([SNOWFLAKE_TEST], 'SELECT * FROM history_day');


--USE Project-DB;

INSERT INTO SF_forecast_d (
    POSTAL_CODE,
    COUNTRY,
    TIME_INIT_UTC,
    DATE_VALID_STD,
    DOY_STD,
    MIN_TEMPERATURE_AIR_2M_C,
    AVG_TEMPERATURE_AIR_2M_C,
    MAX_TEMPERATURE_AIR_2M_C,
    MIN_TEMPERATURE_WETBULB_2M_C,
    AVG_TEMPERATURE_WETBULB_2M_C,
    MAX_TEMPERATURE_WETBULB_2M_C,
    MIN_TEMPERATURE_DEWPOINT_2M_C,
    AVG_TEMPERATURE_DEWPOINT_2M_C,
    MAX_TEMPERATURE_DEWPOINT_2M_C,
    MIN_TEMPERATURE_FEELSLIKE_2M_C,
    AVG_TEMPERATURE_FEELSLIKE_2M_C,
    MAX_TEMPERATURE_FEELSLIKE_2M_C,
    MIN_TEMPERATURE_WINDCHILL_2M_C,
    AVG_TEMPERATURE_WINDCHILL_2M_C,
    MAX_TEMPERATURE_WINDCHILL_2M_C,
    MIN_TEMPERATURE_HEATINDEX_2M_C,
    AVG_TEMPERATURE_HEATINDEX_2M_C,
    MAX_TEMPERATURE_HEATINDEX_2M_C,
    MIN_HUMIDITY_RELATIVE_2M_PCT,
    AVG_HUMIDITY_RELATIVE_2M_PCT,
    MAX_HUMIDITY_RELATIVE_2M_PCT,
    MIN_HUMIDITY_SPECIFIC_2M_GPKG,
    AVG_HUMIDITY_SPECIFIC_2M_GPKG,
    MAX_HUMIDITY_SPECIFIC_2M_GPKG,
    MIN_PRESSURE_2M_MB,
    AVG_PRESSURE_2M_MB,
    MAX_PRESSURE_2M_MB,
    MIN_PRESSURE_MEAN_SEA_LEVEL_MB,
    AVG_PRESSURE_MEAN_SEA_LEVEL_MB,
    MAX_PRESSURE_MEAN_SEA_LEVEL_MB,
    MIN_WIND_SPEED_10M_MPS,
    AVG_WIND_SPEED_10M_MPS,
    MAX_WIND_SPEED_10M_MPS,
    AVG_WIND_DIRECTION_10M_DEG,
    MIN_WIND_SPEED_80M_MPS,
    AVG_WIND_SPEED_80M_MPS,
    MAX_WIND_SPEED_80M_MPS,
    AVG_WIND_DIRECTION_80M_DEG,
    MIN_WIND_SPEED_100M_MPS,
    AVG_WIND_SPEED_100M_MPS,
    MAX_WIND_SPEED_100M_MPS,
    AVG_WIND_DIRECTION_100M_DEG,
    TOT_PRECIPITATION_MM,
    TOT_SNOWFALL_CM,
    MIN_CLOUD_COVER_TOT_PCT,
    AVG_CLOUD_COVER_TOT_PCT,
    MAX_CLOUD_COVER_TOT_PCT,
    MIN_RADIATION_SOLAR_TOTAL_WPM2,
    AVG_RADIATION_SOLAR_TOTAL_WPM2,
    MAX_RADIATION_SOLAR_TOTAL_WPM2,
    TOT_RADIATION_SOLAR_TOTAL_WPM2,
    PROBABILITY_OF_PRECIPITATION_PCT,
    PROBABILITY_OF_SNOW_PCT
)
SELECT
    POSTAL_CODE,
    COUNTRY,
    TIME_INIT_UTC,
    DATE_VALID_STD,
    DOY_STD,
    MIN_TEMPERATURE_AIR_2M_C,
    AVG_TEMPERATURE_AIR_2M_C,
    MAX_TEMPERATURE_AIR_2M_C,
    MIN_TEMPERATURE_WETBULB_2M_C,
    AVG_TEMPERATURE_WETBULB_2M_C,
    MAX_TEMPERATURE_WETBULB_2M_C,
    MIN_TEMPERATURE_DEWPOINT_2M_C,
    AVG_TEMPERATURE_DEWPOINT_2M_C,
    MAX_TEMPERATURE_DEWPOINT_2M_C,
    MIN_TEMPERATURE_FEELSLIKE_2M_C,
    AVG_TEMPERATURE_FEELSLIKE_2M_C,
    MAX_TEMPERATURE_FEELSLIKE_2M_C,
    MIN_TEMPERATURE_WINDCHILL_2M_C,
    AVG_TEMPERATURE_WINDCHILL_2M_C,
    MAX_TEMPERATURE_WINDCHILL_2M_C,
    MIN_TEMPERATURE_HEATINDEX_2M_C,
    AVG_TEMPERATURE_HEATINDEX_2M_C,
    MAX_TEMPERATURE_HEATINDEX_2M_C,
    MIN_HUMIDITY_RELATIVE_2M_PCT,
    AVG_HUMIDITY_RELATIVE_2M_PCT,
    MAX_HUMIDITY_RELATIVE_2M_PCT,
    MIN_HUMIDITY_SPECIFIC_2M_GPKG,
    AVG_HUMIDITY_SPECIFIC_2M_GPKG,
    MAX_HUMIDITY_SPECIFIC_2M_GPKG,
    MIN_PRESSURE_2M_MB,
    AVG_PRESSURE_2M_MB,
    MAX_PRESSURE_2M_MB,
    MIN_PRESSURE_MEAN_SEA_LEVEL_MB,
    AVG_PRESSURE_MEAN_SEA_LEVEL_MB,
    MAX_PRESSURE_MEAN_SEA_LEVEL_MB,
    MIN_WIND_SPEED_10M_MPS,
    AVG_WIND_SPEED_10M_MPS,
    MAX_WIND_SPEED_10M_MPS,
    AVG_WIND_DIRECTION_10M_DEG,
    MIN_WIND_SPEED_80M_MPS,
    AVG_WIND_SPEED_80M_MPS,
    MAX_WIND_SPEED_80M_MPS,
    AVG_WIND_DIRECTION_80M_DEG,
    MIN_WIND_SPEED_100M_MPS,
    AVG_WIND_SPEED_100M_MPS,
    MAX_WIND_SPEED_100M_MPS,
    AVG_WIND_DIRECTION_100M_DEG,
    TOT_PRECIPITATION_MM,
    TOT_SNOWFALL_CM,
    MIN_CLOUD_COVER_TOT_PCT,
    AVG_CLOUD_COVER_TOT_PCT,
    MAX_CLOUD_COVER_TOT_PCT,
    MIN_RADIATION_SOLAR_TOTAL_WPM2,
    AVG_RADIATION_SOLAR_TOTAL_WPM2,
    MAX_RADIATION_SOLAR_TOTAL_WPM2,
    TOT_RADIATION_SOLAR_TOTAL_WPM2,
    PROBABILITY_OF_PRECIPITATION_PCT,
    PROBABILITY_OF_SNOW_PCT
FROM OPENQUERY([SNOWFLAKE_TEST], 'SELECT * FROM forecast_day');
